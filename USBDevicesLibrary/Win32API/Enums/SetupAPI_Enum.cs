using System.Collections;
using System.Runtime.InteropServices;

// https://learn.microsoft.com/en-us/windows/win32/api/setupapi/

namespace USBDevicesLibrary.Win32API;

public static partial class SetupAPIData
{
    public enum SPDRP : uint
    {
        SPDRP_DEVICEDESC = (0x00000000),  // DeviceDesc (R/W)
        SPDRP_HARDWAREID = (0x00000001),  // HardwareID (R/W)
        SPDRP_COMPATIBLEIDS = (0x00000002),  // CompatibleIDs (R/W)
        SPDRP_UNUSED0 = (0x00000003),  // unused
        SPDRP_SERVICE = (0x00000004),  // Service (R/W)
        SPDRP_UNUSED1 = (0x00000005),  // unused
        SPDRP_UNUSED2 = (0x00000006),  // unused
        SPDRP_CLASS = (0x00000007),  // Class (R--tied to ClassGUID)
        SPDRP_CLASSGUID = (0x00000008),  // ClassGUID (R/W)
        SPDRP_DRIVER = (0x00000009),  // Driver (R/W)
        SPDRP_CONFIGFLAGS = (0x0000000A),  // ConfigFlags (R/W)
        SPDRP_MFG = (0x0000000B),  // Mfg (R/W)
        SPDRP_FRIENDLYNAME = (0x0000000C),  // FriendlyName (R/W)
        SPDRP_LOCATION_INFORMATION = (0x0000000D),  // LocationInformation (R/W)
        SPDRP_PHYSICAL_DEVICE_OBJECT_NAME = (0x0000000E),  // PhysicalDeviceObjectName (R)
        SPDRP_CAPABILITIES = (0x0000000F),  // Capabilities (R)
        SPDRP_UI_NUMBER = (0x00000010),  // UiNumber (R)
        SPDRP_UPPERFILTERS = (0x00000011),  // UpperFilters (R/W)
        SPDRP_LOWERFILTERS = (0x00000012),  // LowerFilters (R/W)
        SPDRP_BUSTYPEGUID = (0x00000013),  // BusTypeGUID (R)
        SPDRP_LEGACYBUSTYPE = (0x00000014),  // LegacyBusType (R)
        SPDRP_BUSNUMBER = (0x00000015),  // BusNumber (R)
        SPDRP_ENUMERATOR_NAME = (0x00000016),  // Enumerator Name (R)
        SPDRP_SECURITY = (0x00000017),  // Security (R/W, binary form)
        SPDRP_SECURITY_SDS = (0x00000018),  // Security (W, SDS form)
        SPDRP_DEVTYPE = (0x00000019),  // Device Type (R/W)
        SPDRP_EXCLUSIVE = (0x0000001A),  // Device is exclusive-access (R/W)
        SPDRP_CHARACTERISTICS = (0x0000001B),  // Device Characteristics (R/W)
        SPDRP_ADDRESS = (0x0000001C),  // Device Address (R)
        SPDRP_UI_NUMBER_DESC_FORMAT = (0X0000001D),  // UiNumberDescFormat (R/W)
        SPDRP_DEVICE_POWER_DATA = (0x0000001E),  // Device Power Data (R)
        SPDRP_REMOVAL_POLICY = (0x0000001F),  // Removal Policy (R)
        SPDRP_REMOVAL_POLICY_HW_DEFAULT = (0x00000020),  // Hardware Removal Policy (R)
        SPDRP_REMOVAL_POLICY_OVERRIDE = (0x00000021),  // Removal Policy Override (RW)
        SPDRP_INSTALL_STATE = (0x00000022),  // Device Install State (R)
        SPDRP_LOCATION_PATHS = (0x00000023),  // Device Location Paths (R)
        SPDRP_BASE_CONTAINERID = (0x00000024),  // Base ContainerID (R)
    }

    public enum DIGCF : uint
    {
        DIGCF_DEFAULT = 0x00000001, // only valid with DIGCF_DEVICEINTERFACE
        DIGCF_PRESENT = 0x00000002,
        DIGCF_ALLCLASSES = 0x00000004,
        DIGCF_PROFILE = 0x00000008,
        DIGCF_DEVICEINTERFACE = 0x00000010,
    }

    // Capabilities bits (the capability value is returned from calling
    // CM_Get_DevInst_Registry_Property with CM_DRP_CAPABILITIES property)
    [Flags]
    public enum CM_DRP_CAPABILITIES : uint
    {
        CM_DEVCAP_LOCKSUPPORTED = 0x00000001,
        CM_DEVCAP_EJECTSUPPORTED = 0x00000002,
        CM_DEVCAP_REMOVABLE = 0x00000004,
        CM_DEVCAP_DOCKDEVICE = 0x00000008,
        CM_DEVCAP_UNIQUEID = 0x00000010,
        CM_DEVCAP_SILENTINSTALL = 0x00000020,
        CM_DEVCAP_RAWDEVICEOK = 0x00000040,
        CM_DEVCAP_SURPRISEREMOVALOK = 0x00000080,
        CM_DEVCAP_HARDWAREDISABLED = 0x00000100,
        CM_DEVCAP_NONDYNAMIC = 0x00000200,
        CM_DEVCAP_SECUREDEVICE = 0x00000400,
    }

    // https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_device_object
    // https://github.com/tpn/winsdk-10/blob/master/Include/10.0.14393.0/km/wdm.h
    // Define the various device characteristics flags
    //
    [Flags]
    public enum DEVICE_CHARACTERISTICS : uint
    {
        FILE_REMOVABLE_MEDIA = 0x00000001,
        FILE_READ_ONLY_DEVICE = 0x00000002,
        FILE_FLOPPY_DISKETTE = 0x00000004,
        FILE_WRITE_ONCE_MEDIA = 0x00000008,
        FILE_REMOTE_DEVICE = 0x00000010,
        FILE_DEVICE_IS_MOUNTED = 0x00000020,
        FILE_VIRTUAL_VOLUME = 0x00000040,
        FILE_AUTOGENERATED_DEVICE_NAME = 0x00000080,
        FILE_DEVICE_SECURE_OPEN = 0x00000100,
        FILE_CHARACTERISTIC_PNP_DEVICE = 0x00000800,
        FILE_CHARACTERISTIC_TS_DEVICE = 0x00001000,
        FILE_CHARACTERISTIC_WEBDAV_DEVICE = 0x00002000,
        FILE_CHARACTERISTIC_CSV = 0x00010000,
        FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL = 0x00020000,
        FILE_PORTABLE_DEVICE = 0x00040000,
    }

    [Flags]
    public enum CONFIG_FLAGS : uint
    {
        CONFIGFLAG_DISABLED = 0x00000001, // Set if disabled
        CONFIGFLAG_REMOVED = 0x00000002, // Set if a present hardware enum device deleted
        CONFIGFLAG_MANUAL_INSTALL = 0x00000004, // Set if the devnode was manually installed
        CONFIGFLAG_IGNORE_BOOT_LC = 0x00000008, // Set if skip the boot config
        CONFIGFLAG_NET_BOOT = 0x00000010, // Load this devnode when in net boot
        CONFIGFLAG_REINSTALL = 0x00000020, // Redo install
        CONFIGFLAG_FAILEDINSTALL = 0x00000040, // Failed the install
        CONFIGFLAG_CANTSTOPACHILD = 0x00000080, // Can't stop/remove a single child
        CONFIGFLAG_OKREMOVEROM = 0x00000100, // Can remove even if rom.
        CONFIGFLAG_NOREMOVEEXIT = 0x00000200, // Don't remove at exit.
        CONFIGFLAG_FINISH_INSTALL = 0x00000400, // Complete install for devnode running 'raw'
        CONFIGFLAG_NEEDS_FORCED_CONFIG = 0x00000800, // This devnode requires a forced config
        CONFIGFLAG_NETBOOT_CARD = 0x00001000, // This is the remote boot network card
        CONFIGFLAG_PARTIAL_LOG_CONF = 0x00002000, // This device has a partial logconfig
        CONFIGFLAG_SUPPRESS_SURPRISE = 0x00004000, // Set if unsafe removals should be ignored
        CONFIGFLAG_VERIFY_HARDWARE = 0x00008000, // Set if hardware should be tested for logo failures
        CONFIGFLAG_FINISHINSTALL_UI = 0x00010000, // Show the finish install wizard pages for the installed device.
        CONFIGFLAG_FINISHINSTALL_ACTION = 0x00020000, // Call installer with DIF_FINISHINSTALL_ACTION in client context.
        CONFIGFLAG_BOOT_DEVICE = 0x00040000, // Configured devnode during boot phase
        CONFIGFLAG_NEEDS_CLASS_CONFIG = 0x00080000, // Device needs additional class configuration to start
    }

    // Device Power Information
    // Accessable via CM_Get_DevInst_Registry_Property_Ex(CM_DRP_DEVICE_POWER_DATA)
    [Flags]
    public enum DEVICED_POWER_INFORMATION : uint
    {
        PDCAP_D0_SUPPORTED = 0x00000001, //The device supports system power state D0.
        PDCAP_D1_SUPPORTED = 0x00000002, //The device supports system power state D1.
        PDCAP_D2_SUPPORTED = 0x00000004, //The device supports system power state D2.
        PDCAP_D3_SUPPORTED = 0x00000008, //The device supports system power state D3.
        PDCAP_S0_SUPPORTED = 0x00010000, //The device supports system sleep state S0.
        PDCAP_S1_SUPPORTED = 0x00020000, //The device supports system sleep state S1.
        PDCAP_S2_SUPPORTED = 0x00040000, //The device supports system sleep state S2.
        PDCAP_S3_SUPPORTED = 0x00080000, //The device supports system sleep state S3.
        PDCAP_S4_SUPPORTED = 0x01000000, //The device supports system sleep state S4.
        PDCAP_S5_SUPPORTED = 0x02000000, //The device supports system sleep state S5.
        PDCAP_WAKE_FROM_D0_SUPPORTED = 0x00000010, //The device supports waking from system power state D0.
        PDCAP_WAKE_FROM_D1_SUPPORTED = 0x00000020, //The device supports waking from system power state D1.
        PDCAP_WAKE_FROM_D2_SUPPORTED = 0x00000040, //The device supports waking from system power state D2.
        PDCAP_WAKE_FROM_D3_SUPPORTED = 0x00000080, //The device supports waking from system power state D3.
        PDCAP_WAKE_FROM_S0_SUPPORTED = 0x00100000, //The device supports waking from system sleep state S0.
        PDCAP_WAKE_FROM_S1_SUPPORTED = 0x00200000, //The device supports waking from system sleep state S1.
        PDCAP_WAKE_FROM_S2_SUPPORTED = 0x00400000, //The device supports waking from system sleep state S2.
        PDCAP_WAKE_FROM_S3_SUPPORTED = 0x00800000, //The device supports waking from system sleep state S3.
        PDCAP_WARM_EJECT_SUPPORTED = 0x00000100, //The device supports warm eject.
    }

    

    public enum DEVICE_INSTALL_STATE : uint
    {
        InstallStateInstalled, // The device is installed.
        InstallStateNeedsReinstall, // The system will try to reinstall the device on a later enumeration.
        InstallStateFailedInstall, // The device did not install properly.
        InstallStateFinishInstall, // The installation of this device is not yet complete.
    }

    public enum INTERFACE_TYPE : uint
    {
        InterfaceTypeUndefined = 0,
        Internal,
        Isa,
        Eisa,
        MicroChannel,
        TurboChannel,
        PCIBus,
        VMEBus,
        NuBus,
        PCMCIABus,
        CBus,
        MPIBus,
        MPSABus,
        ProcessorInternal,
        InternalPowerBus,
        PNPISABus,
        PNPBus,
        Vmcs,
        ACPIBus,
        MaximumInterfaceType
    }

    // Removal policies (retrievable via CM_Get_DevInst_Registry_Property with
    // the CM_DRP_REMOVAL_POLICY, CM_DRP_REMOVAL_POLICY_OVERRIDE, or
    // CM_DRP_REMOVAL_POLICY_HW_DEFAULT properties)
    public enum CM_REMOVAL_POLICY : uint
    {
        CM_REMOVAL_POLICY_EXPECT_NO_REMOVAL = 1,
        CM_REMOVAL_POLICY_EXPECT_ORDERLY_REMOVAL = 2,
        CM_REMOVAL_POLICY_EXPECT_SURPRISE_REMOVAL = 3,
    }

    public enum DevPropType : uint
    {
        DEVPROP_TYPE_EMPTY = 0x00000000,  // nothing, no property data
        DEVPROP_TYPE_NULL = 0x00000001,  // null property data
        DEVPROP_TYPE_SBYTE = 0x00000002,
        DEVPROP_TYPE_BYTE = 0x00000003,
        DEVPROP_TYPE_INT16 = 0x00000004,
        DEVPROP_TYPE_UINT16 = 0x00000005,
        DEVPROP_TYPE_INT32 = 0x00000006,
        DEVPROP_TYPE_UINT32 = 0x00000007,
        DEVPROP_TYPE_INT64 = 0x00000008,
        DEVPROP_TYPE_UINT64 = 0x00000009,
        DEVPROP_TYPE_FLOAT = 0x0000000A,
        DEVPROP_TYPE_DOUBLE = 0x0000000B,
        DEVPROP_TYPE_DECIMAL = 0x0000000C,
        DEVPROP_TYPE_GUID = 0x0000000D,
        DEVPROP_TYPE_CURRENCY = 0x0000000E,  // 64 bit signed int currency value (CURRENCY)
        DEVPROP_TYPE_DATE = 0x0000000F,
        DEVPROP_TYPE_FILETIME = 0x00000010,
        DEVPROP_TYPE_BOOLEAN = 0x00000011,
        DEVPROP_TYPE_STRING = 0x00000012,
        DEVPROP_TYPE_STRING_LIST = (DEVPROP_TYPE_STRING | DEVPROP_TYPEMOD_LIST),
        DEVPROP_TYPE_SECURITY_DESCRIPTOR = 0x00000013,
        DEVPROP_TYPE_SECURITY_DESCRIPTOR_STRING = 0x00000014,
        DEVPROP_TYPE_DEVPROPKEY = 0x00000015,
        DEVPROP_TYPE_DEVPROPTYPE = 0x00000016,
        DEVPROP_TYPE_BINARY = (DEVPROP_TYPE_BYTE | DEVPROP_TYPEMOD_ARRAY),
        DEVPROP_TYPE_ERROR = 0x00000017,  // 32-bit Win32 system error code
        DEVPROP_TYPE_NTSTATUS = 0x00000018,  // 32-bit NTSTATUS code
        DEVPROP_TYPE_STRING_INDIRECT = 0x00000019,  // string resource (@[path\]<dllname>,-<strId>)

        // Property type modifiers, used to modify base DEVPROP_TYPE values and not valid as standalone
        // DEVPROPTYPE values.
        DEVPROP_TYPEMOD_ARRAY = 0x00001000,  // array of fixed-sized data elements
        DEVPROP_TYPEMOD_LIST = 0x00002000,  // list of variable-sized data elements
    }

    // Device Instance status flags, returned by call to CM_Get_DevInst_Status
    [Flags]
    public enum DEVICE_INSTANCE_STATUS : uint
    {
        DN_ROOT_ENUMERATED = (0x00000001), // Was enumerated by ROOT
        DN_DRIVER_LOADED = (0x00000002), // Has Register_Device_Driver
        DN_ENUM_LOADED = (0x00000004), // Has Register_Enumerator
        DN_STARTED = (0x00000008), // Is currently configured
        DN_MANUAL = (0x00000010), // Manually installed
        DN_NEED_TO_ENUM = (0x00000020), // May need reenumeration
        DN_NOT_FIRST_TIME = (0x00000040), // Has received a config
        DN_HARDWARE_ENUM = (0x00000080), // Enum generates hardware ID
        DN_LIAR = (0x00000100), // Lied about can reconfig once
        DN_HAS_MARK = (0x00000200), // Not CM_Create_DevInst lately
        DN_HAS_PROBLEM = (0x00000400), // Need device installer
        DN_FILTERED = (0x00000800), // Is filtered
        DN_MOVED = (0x00001000), // Has been moved
        DN_DISABLEABLE = (0x00002000), // Can be disabled
        DN_REMOVABLE = (0x00004000), // Can be removed
        DN_PRIVATE_PROBLEM = (0x00008000), // Has a private problem
        DN_MF_PARENT = (0x00010000), // Multi function parent
        DN_MF_CHILD = (0x00020000), // Multi function child
        DN_WILL_BE_REMOVED = (0x00040000), // DevInst is being removed
        // Windows 4 OPK2 Flags
        DN_NOT_FIRST_TIMEE = 0x00080000,  // S: Has received a config enumerate
        DN_STOP_FREE_RES = 0x00100000,  // S: When child is stopped, free resources
        DN_REBAL_CANDIDATE = 0x00200000,  // S: Don't skip during rebalance
        DN_BAD_PARTIAL = 0x00400000,  // S: This devnode's log_confs do not have same resources
        DN_NT_ENUMERATOR = 0x00800000,  // S: This devnode's is an NT enumerator
        DN_NT_DRIVER = 0x01000000,  // S: This devnode's is an NT driver
        // Windows 4.1 Flags
        DN_NEEDS_LOCKING = 0x02000000,  // S: Devnode need lock resume processing
        DN_ARM_WAKEUP = 0x04000000,  // S: Devnode can be the wakeup device
        DN_APM_ENUMERATOR = 0x08000000,  // S: APM aware enumerator
        DN_APM_DRIVER = 0x10000000,  // S: APM aware driver
        DN_SILENT_INSTALL = 0x20000000,  // S: Silent install
        DN_NO_SHOW_IN_DM = 0x40000000,  // S: No show in device manager
        DN_BOOT_LOG_PROB = 0x80000000,  // S: Had a problem during preassignment of boot log conf
    }

    // SP_DRVINSTALL_PARAMS.Flags values
    [Flags]
    public enum SP_DRVINSTALL_PARAMS : uint
    {
        DNF_DUPDESC = 0x00000001,  // Multiple providers have same desc
        DNF_OLDDRIVER = 0x00000002,  // Driver node specifies old/current driver
        DNF_EXCLUDEFROMLIST = 0x00000004,  // If set, this driver node will not be displayed in any driver select dialogs.
        DNF_NODRIVER = 0x00000008,  // if we want to install no driver (e.g no mouse drv)
        DNF_LEGACYINF = 0x00000010,  // Driver node came from an old-style INF (obsolete)
        DNF_CLASS_DRIVER = 0x00000020,  // Driver node represents a class driver
        DNF_COMPATIBLE_DRIVER = 0x00000040,  // Driver node represents a compatible driver
        DNF_INET_DRIVER = 0x00000080,  // Driver comes from an internet source
        DNF_UNUSED1 = 0x00000100,
        DNF_UNUSED2 = 0x00000200,
        DNF_OLD_INET_DRIVER = 0x00000400,  // Driver came from the Internet, but we don't currently have access to it's source files.  Never attempt to
                                           // install a driver with this flag! Note used on Windows Vista and Later.
        DNF_BAD_DRIVER = 0x00000800,  // Driver node should not be used at all
        DNF_DUPPROVIDER = 0x00001000,  // Multiple drivers have the same provider and desc

        // _SETUPAPI_VER >= _WIN32_WINNT_WINXP
        DNF_INF_IS_SIGNED = 0x00002000,  // If file is digitally signed
        DNF_OEM_F6_INF = 0x00004000,  // INF specified from F6 during textmode setup.
        DNF_DUPDRIVERVER = 0x00008000,  // Multipe drivers have the same desc, provider, and DriverVer values
        DNF_BASIC_DRIVER = 0x00010000,  // Driver provides basic functionality, but should not be chosen if other signed drivers exist.
        // _SETUPAPI_VER >= _WIN32_WINNT_WINXP

        // _SETUPAPI_VER >= _WIN32_WINNT_WS03
        DNF_AUTHENTICODE_SIGNED = 0x00020000,  // Inf file is signed by an Authenticode(tm) catalog.
        // _SETUPAPI_VER >= _WIN32_WINNT_WS03

        // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN
        DNF_INSTALLEDDRIVER = 0x00040000,  // This driver node is currently installed on the device.
        DNF_ALWAYSEXCLUDEFROMLIST = 0x00080000,  // If set, this driver is not even displayed in alternative platform either.
        DNF_INBOX_DRIVER = 0x00100000,  // This driver node came from an INF that shipped with Windows.
        // _SETUPAPI_VER >= _WIN32_WINNT_LONGHORN

        // _SETUPAPI_VER >= _WIN32_WINNT_WIN7
        DNF_REQUESTADDITIONALSOFTWARE = 0x00200000,  // This driver is only part of a software solution needed
        // _SETUPAPI_VER >= _WIN32_WINNT_WIN7

        DNF_UNUSED_22 = 0x00400000,
        DNF_UNUSED_23 = 0x00800000,
        DNF_UNUSED_24 = 0x01000000,
        DNF_UNUSED_25 = 0x02000000,
        DNF_UNUSED_26 = 0x04000000,
        DNF_UNUSED_27 = 0x08000000,
        DNF_UNUSED_28 = 0x10000000,
        DNF_UNUSED_29 = 0x20000000,
        DNF_UNUSED_30 = 0x40000000,
        DNF_UNUSED_31 = 0x80000000,
    }

    // Flags for SetupDiGetClassPropertyKeys, SetupDiGetClassProperty, and
    // SetupDiSetClassProperty.
    public enum DICLASSPROP : uint
    {
        DICLASSPROP_INSTALLER = 0x00000001,    // device setup class property
        DICLASSPROP_INTERFACE = 0x00000002,    // device interface class property
    }

    // Ordinal values distinguishing between class drivers and
    // device drivers.
    // (Passed in 'DriverType' parameter of driver information list APIs)
    public enum SPDIT : uint
    {
        SPDIT_NODRIVER = 0x00000000,
        SPDIT_CLASSDRIVER = 0x00000001,
        SPDIT_COMPATDRIVER = 0x00000002,
    }
}
