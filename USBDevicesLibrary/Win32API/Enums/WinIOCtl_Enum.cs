using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.JavaScript;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows;
using USBDevicesLibrary.Devices;
using USBDevicesLibrary.USBDevices;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static USBDevicesLibrary.Win32API.USBIOCtl;
using static USBDevicesLibrary.Win32API.USBSpec;

namespace USBDevicesLibrary.Win32API;

public static partial class WinIOCtlData
{
    // Define the various device type values.  Note that values used by Microsoft
    // Corporation are in the range 0-32767, and 32768-65535 are reserved for use
    // by customers.
    public enum DEVICE_TYPES : uint
    {
        FILE_DEVICE_BEEP = 0X00000001,
        FILE_DEVICE_CD_ROM = 0X00000002,
        FILE_DEVICE_CD_ROM_FILE_SYSTEM = 0X00000003,
        FILE_DEVICE_CONTROLLER = 0X00000004,
        FILE_DEVICE_DATALINK = 0X00000005,
        FILE_DEVICE_DFS = 0X00000006,
        FILE_DEVICE_DISK = 0X00000007,
        IOCTL_DISK_BASE = FILE_DEVICE_DISK,
        FILE_DEVICE_DISK_FILE_SYSTEM = 0X00000008,
        FILE_DEVICE_FILE_SYSTEM = 0X00000009,
        FILE_DEVICE_INPORT_PORT = 0X0000000A,
        FILE_DEVICE_KEYBOARD = 0X0000000B,
        FILE_DEVICE_MAILSLOT = 0X0000000C,
        FILE_DEVICE_MIDI_IN = 0X0000000D,
        FILE_DEVICE_MIDI_OUT = 0X0000000E,
        FILE_DEVICE_MOUSE = 0X0000000F,
        FILE_DEVICE_MULTI_UNC_PROVIDER = 0X00000010,
        FILE_DEVICE_NAMED_PIPE = 0X00000011,
        FILE_DEVICE_NETWORK = 0X00000012,
        FILE_DEVICE_NETWORK_BROWSER = 0X00000013,
        FILE_DEVICE_NETWORK_FILE_SYSTEM = 0X00000014,
        FILE_DEVICE_NULL = 0X00000015,
        FILE_DEVICE_PARALLEL_PORT = 0X00000016,
        FILE_DEVICE_PHYSICAL_NETCARD = 0X00000017,
        FILE_DEVICE_PRINTER = 0X00000018,
        FILE_DEVICE_SCANNER = 0X00000019,
        FILE_DEVICE_SERIAL_MOUSE_PORT = 0X0000001A,
        FILE_DEVICE_SERIAL_PORT = 0X0000001B,
        FILE_DEVICE_SCREEN = 0X0000001C,
        FILE_DEVICE_SOUND = 0X0000001D,
        FILE_DEVICE_STREAMS = 0X0000001E,
        FILE_DEVICE_TAPE = 0X0000001F,
        FILE_DEVICE_TAPE_FILE_SYSTEM = 0X00000020,
        FILE_DEVICE_TRANSPORT = 0X00000021,
        FILE_DEVICE_UNKNOWN = 0X00000022,
        FILE_DEVICE_USB = FILE_DEVICE_UNKNOWN,
        FILE_DEVICE_VIDEO = 0X00000023,
        FILE_DEVICE_VIRTUAL_DISK = 0X00000024,
        FILE_DEVICE_WAVE_IN = 0X00000025,
        FILE_DEVICE_WAVE_OUT = 0X00000026,
        FILE_DEVICE_8042_PORT = 0X00000027,
        FILE_DEVICE_NETWORK_REDIRECTOR = 0X00000028,
        FILE_DEVICE_BATTERY = 0X00000029,
        FILE_DEVICE_BUS_EXTENDER = 0X0000002A,
        FILE_DEVICE_MODEM = 0X0000002B,
        FILE_DEVICE_VDM = 0X0000002C,
        FILE_DEVICE_MASS_STORAGE = 0X0000002D,
        IOCTL_STORAGE_BASE = FILE_DEVICE_MASS_STORAGE,
        FILE_DEVICE_SMB = 0X0000002E,
        FILE_DEVICE_KS = 0X0000002F,
        FILE_DEVICE_CHANGER = 0X00000030,
        FILE_DEVICE_SMARTCARD = 0X00000031,
        FILE_DEVICE_ACPI = 0X00000032,
        FILE_DEVICE_DVD = 0X00000033,
        FILE_DEVICE_FULLSCREEN_VIDEO = 0X00000034,
        FILE_DEVICE_DFS_FILE_SYSTEM = 0X00000035,
        FILE_DEVICE_DFS_VOLUME = 0X00000036,
        FILE_DEVICE_SERENUM = 0X00000037,
        FILE_DEVICE_TERMSRV = 0X00000038,
        FILE_DEVICE_KSEC = 0X00000039,
        FILE_DEVICE_FIPS = 0X0000003A,
        FILE_DEVICE_INFINIBAND = 0X0000003B,
        FILE_DEVICE_VMBUS = 0X0000003E,
        FILE_DEVICE_CRYPT_PROVIDER = 0X0000003F,
        FILE_DEVICE_WPD = 0X00000040,
        FILE_DEVICE_BLUETOOTH = 0X00000041,
        FILE_DEVICE_MT_COMPOSITE = 0X00000042,
        FILE_DEVICE_MT_TRANSPORT = 0X00000043,
        FILE_DEVICE_BIOMETRIC = 0X00000044,
        FILE_DEVICE_PMI = 0X00000045,
        FILE_DEVICE_EHSTOR = 0X00000046,
        FILE_DEVICE_DEVAPI = 0X00000047,
        FILE_DEVICE_GPIO = 0X00000048,
        FILE_DEVICE_USBEX = 0X00000049,
        FILE_DEVICE_CONSOLE = 0X00000050,
        FILE_DEVICE_NFP = 0X00000051,
        FILE_DEVICE_SYSENV = 0X00000052,
        FILE_DEVICE_VIRTUAL_BLOCK = 0X00000053,
        FILE_DEVICE_POINT_OF_SERVICE = 0X00000054,
        FILE_DEVICE_STORAGE_REPLICATION = 0X00000055,
        FILE_DEVICE_TRUST_ENV = 0X00000056,
        IOCTL_VOLUME_BASE = FILE_DEVICE_TRUST_ENV,
        FILE_DEVICE_UCM = 0X00000057,
        FILE_DEVICE_UCMTCPCI = 0X00000058,
        FILE_DEVICE_PERSISTENT_MEMORY = 0X00000059,
        IOCTL_SCMBUS_BASE = FILE_DEVICE_PERSISTENT_MEMORY,
        FILE_DEVICE_NVDIMM = 0X0000005A,
        FILE_DEVICE_HOLOGRAPHIC = 0X0000005B,
        FILE_DEVICE_SDFXHCI = 0X0000005C,
        FILE_DEVICE_UCMUCSI = 0X0000005D,
        FILE_DEVICE_PRM = 0X0000005E,
        FILE_DEVICE_EVENT_COLLECTOR = 0X0000005F,
        FILE_DEVICE_USB4 = 0X00000060,
        FILE_DEVICE_SOUNDWIRE = 0X00000061,
    }

    // Define the method codes for how buffers are passed for I/O and FS controls
    public enum METHOD_CODES : uint
    {
        METHOD_BUFFERED = 0,
        METHOD_IN_DIRECT = 1,
        METHOD_OUT_DIRECT = 2,
        METHOD_NEITHER = 3,
        // Define some easier to comprehend aliases:
        //   METHOD_DIRECT_TO_HARDWARE (writes, aka METHOD_IN_DIRECT)
        //   METHOD_DIRECT_FROM_HARDWARE (reads, aka METHOD_OUT_DIRECT)
        METHOD_DIRECT_TO_HARDWARE = METHOD_IN_DIRECT,
        METHOD_DIRECT_FROM_HARDWARE = METHOD_OUT_DIRECT,
    }

    // Define the access check value for any access
    public enum FILE_ACCESS : uint
    {
        // The FILE_READ_ACCESS and FILE_WRITE_ACCESS constants are also defined in ntioapi.h as FILE_READ_DATA and FILE_WRITE_DATA. The values for these
        // constants *MUST* always be in sync.
        // FILE_SPECIAL_ACCESS is checked by the NT I/O system the same as FILE_ANY_ACCESS.
        // The file systems, however, may add additional access checks for I/O and FS controls that use this value.
        FILE_ANY_ACCESS = 0,
        FILE_SPECIAL_ACCESS = (FILE_ANY_ACCESS),
        FILE_READ_ACCESS = (0x0001),    // file & pipe
        FILE_WRITE_ACCESS = (0x0002),    // file & pipe
    }


}
