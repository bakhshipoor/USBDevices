using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.JavaScript;
using System.Text;
using System.Threading.Tasks;
using USBDevicesLibrary.USBDevices;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static USBDevicesLibrary.Win32API.USBIOCtl;
using static USBDevicesLibrary.Win32API.USBSpec;

namespace USBDevicesLibrary.Win32API;

public static partial class WinIOCtlData
{
    // Define the various device type values.  Note that values used by Microsoft
    // Corporation are in the range 0-32767, and 32768-65535 are reserved for use
    // by customers.
    public enum DEVICE_TYPES : uint
    {
        FILE_DEVICE_BEEP = 0X00000001,
        FILE_DEVICE_CD_ROM = 0X00000002,
        FILE_DEVICE_CD_ROM_FILE_SYSTEM = 0X00000003,
        FILE_DEVICE_CONTROLLER = 0X00000004,
        FILE_DEVICE_DATALINK = 0X00000005,
        FILE_DEVICE_DFS = 0X00000006,
        FILE_DEVICE_DISK = 0X00000007,
        IOCTL_DISK_BASE = FILE_DEVICE_DISK,
        FILE_DEVICE_DISK_FILE_SYSTEM = 0X00000008,
        FILE_DEVICE_FILE_SYSTEM = 0X00000009,
        FILE_DEVICE_INPORT_PORT = 0X0000000A,
        FILE_DEVICE_KEYBOARD = 0X0000000B,
        FILE_DEVICE_MAILSLOT = 0X0000000C,
        FILE_DEVICE_MIDI_IN = 0X0000000D,
        FILE_DEVICE_MIDI_OUT = 0X0000000E,
        FILE_DEVICE_MOUSE = 0X0000000F,
        FILE_DEVICE_MULTI_UNC_PROVIDER = 0X00000010,
        FILE_DEVICE_NAMED_PIPE = 0X00000011,
        FILE_DEVICE_NETWORK = 0X00000012,
        FILE_DEVICE_NETWORK_BROWSER = 0X00000013,
        FILE_DEVICE_NETWORK_FILE_SYSTEM = 0X00000014,
        FILE_DEVICE_NULL = 0X00000015,
        FILE_DEVICE_PARALLEL_PORT = 0X00000016,
        FILE_DEVICE_PHYSICAL_NETCARD = 0X00000017,
        FILE_DEVICE_PRINTER = 0X00000018,
        FILE_DEVICE_SCANNER = 0X00000019,
        FILE_DEVICE_SERIAL_MOUSE_PORT = 0X0000001A,
        FILE_DEVICE_SERIAL_PORT = 0X0000001B,
        FILE_DEVICE_SCREEN = 0X0000001C,
        FILE_DEVICE_SOUND = 0X0000001D,
        FILE_DEVICE_STREAMS = 0X0000001E,
        FILE_DEVICE_TAPE = 0X0000001F,
        FILE_DEVICE_TAPE_FILE_SYSTEM = 0X00000020,
        FILE_DEVICE_TRANSPORT = 0X00000021,
        FILE_DEVICE_UNKNOWN = 0X00000022,
        FILE_DEVICE_USB = FILE_DEVICE_UNKNOWN,
        FILE_DEVICE_VIDEO = 0X00000023,
        FILE_DEVICE_VIRTUAL_DISK = 0X00000024,
        FILE_DEVICE_WAVE_IN = 0X00000025,
        FILE_DEVICE_WAVE_OUT = 0X00000026,
        FILE_DEVICE_8042_PORT = 0X00000027,
        FILE_DEVICE_NETWORK_REDIRECTOR = 0X00000028,
        FILE_DEVICE_BATTERY = 0X00000029,
        FILE_DEVICE_BUS_EXTENDER = 0X0000002A,
        FILE_DEVICE_MODEM = 0X0000002B,
        FILE_DEVICE_VDM = 0X0000002C,
        FILE_DEVICE_MASS_STORAGE = 0X0000002D,
        IOCTL_STORAGE_BASE = FILE_DEVICE_MASS_STORAGE,
        FILE_DEVICE_SMB = 0X0000002E,
        FILE_DEVICE_KS = 0X0000002F,
        FILE_DEVICE_CHANGER = 0X00000030,
        FILE_DEVICE_SMARTCARD = 0X00000031,
        FILE_DEVICE_ACPI = 0X00000032,
        FILE_DEVICE_DVD = 0X00000033,
        FILE_DEVICE_FULLSCREEN_VIDEO = 0X00000034,
        FILE_DEVICE_DFS_FILE_SYSTEM = 0X00000035,
        FILE_DEVICE_DFS_VOLUME = 0X00000036,
        FILE_DEVICE_SERENUM = 0X00000037,
        FILE_DEVICE_TERMSRV = 0X00000038,
        FILE_DEVICE_KSEC = 0X00000039,
        FILE_DEVICE_FIPS = 0X0000003A,
        FILE_DEVICE_INFINIBAND = 0X0000003B,
        FILE_DEVICE_VMBUS = 0X0000003E,
        FILE_DEVICE_CRYPT_PROVIDER = 0X0000003F,
        FILE_DEVICE_WPD = 0X00000040,
        FILE_DEVICE_BLUETOOTH = 0X00000041,
        FILE_DEVICE_MT_COMPOSITE = 0X00000042,
        FILE_DEVICE_MT_TRANSPORT = 0X00000043,
        FILE_DEVICE_BIOMETRIC = 0X00000044,
        FILE_DEVICE_PMI = 0X00000045,
        FILE_DEVICE_EHSTOR = 0X00000046,
        FILE_DEVICE_DEVAPI = 0X00000047,
        FILE_DEVICE_GPIO = 0X00000048,
        FILE_DEVICE_USBEX = 0X00000049,
        FILE_DEVICE_CONSOLE = 0X00000050,
        FILE_DEVICE_NFP = 0X00000051,
        FILE_DEVICE_SYSENV = 0X00000052,
        FILE_DEVICE_VIRTUAL_BLOCK = 0X00000053,
        FILE_DEVICE_POINT_OF_SERVICE = 0X00000054,
        FILE_DEVICE_STORAGE_REPLICATION = 0X00000055,
        FILE_DEVICE_TRUST_ENV = 0X00000056,
        IOCTL_VOLUME_BASE = FILE_DEVICE_TRUST_ENV,
        FILE_DEVICE_UCM = 0X00000057,
        FILE_DEVICE_UCMTCPCI = 0X00000058,
        FILE_DEVICE_PERSISTENT_MEMORY = 0X00000059,
        IOCTL_SCMBUS_BASE = FILE_DEVICE_PERSISTENT_MEMORY,
        FILE_DEVICE_NVDIMM = 0X0000005A,
        FILE_DEVICE_HOLOGRAPHIC = 0X0000005B,
        FILE_DEVICE_SDFXHCI = 0X0000005C,
        FILE_DEVICE_UCMUCSI = 0X0000005D,
        FILE_DEVICE_PRM = 0X0000005E,
        FILE_DEVICE_EVENT_COLLECTOR = 0X0000005F,
        FILE_DEVICE_USB4 = 0X00000060,
        FILE_DEVICE_SOUNDWIRE = 0X00000061,
    }

    // Define the method codes for how buffers are passed for I/O and FS controls
    public enum METHOD_CODES : uint
    {
        METHOD_BUFFERED = 0,
        METHOD_IN_DIRECT = 1,
        METHOD_OUT_DIRECT = 2,
        METHOD_NEITHER = 3,
        // Define some easier to comprehend aliases:
        //   METHOD_DIRECT_TO_HARDWARE (writes, aka METHOD_IN_DIRECT)
        //   METHOD_DIRECT_FROM_HARDWARE (reads, aka METHOD_OUT_DIRECT)
        METHOD_DIRECT_TO_HARDWARE = METHOD_IN_DIRECT,
        METHOD_DIRECT_FROM_HARDWARE = METHOD_OUT_DIRECT,
    }

    // Define the access check value for any access
    public enum FILE_ACCESS : uint
    {
        // The FILE_READ_ACCESS and FILE_WRITE_ACCESS constants are also defined in ntioapi.h as FILE_READ_DATA and FILE_WRITE_DATA. The values for these
        // constants *MUST* always be in sync.
        // FILE_SPECIAL_ACCESS is checked by the NT I/O system the same as FILE_ANY_ACCESS.
        // The file systems, however, may add additional access checks for I/O and FS controls that use this value.
        FILE_ANY_ACCESS = 0,
        FILE_SPECIAL_ACCESS = (FILE_ANY_ACCESS),
        FILE_READ_ACCESS = (0x0001),    // file & pipe
        FILE_WRITE_ACCESS = (0x0002),    // file & pipe
    }

    public enum STORAGE_IOCTL_Enum
    {
        IOCTL_STORAGE_CHECK_VERIFY,
        IOCTL_STORAGE_CHECK_VERIFY2,
        IOCTL_STORAGE_MEDIA_REMOVAL,
        IOCTL_STORAGE_EJECT_MEDIA,
        IOCTL_STORAGE_LOAD_MEDIA,
        IOCTL_STORAGE_LOAD_MEDIA2,
        IOCTL_STORAGE_RESERVE,
        IOCTL_STORAGE_RELEASE,
        IOCTL_STORAGE_FIND_NEW_DEVICES,
        IOCTL_STORAGE_EJECTION_CONTROL,
        IOCTL_STORAGE_MCN_CONTROL,
        IOCTL_STORAGE_GET_MEDIA_TYPES,
        IOCTL_STORAGE_GET_MEDIA_TYPES_EX,
        IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER,
        IOCTL_STORAGE_GET_HOTPLUG_INFO,
        IOCTL_STORAGE_SET_HOTPLUG_INFO,
        IOCTL_STORAGE_RESET_BUS,
        IOCTL_STORAGE_RESET_DEVICE,
        IOCTL_STORAGE_BREAK_RESERVATION,
        IOCTL_STORAGE_PERSISTENT_RESERVE_IN,
        IOCTL_STORAGE_PERSISTENT_RESERVE_OUT,
        IOCTL_STORAGE_GET_DEVICE_NUMBER,
        IOCTL_STORAGE_GET_DEVICE_NUMBER_EX,
        IOCTL_STORAGE_PREDICT_FAILURE,
        IOCTL_STORAGE_FAILURE_PREDICTION_CONFIG,
        IOCTL_STORAGE_GET_COUNTERS,
        IOCTL_STORAGE_READ_CAPACITY,
        IOCTL_STORAGE_GET_DEVICE_TELEMETRY,
        IOCTL_STORAGE_DEVICE_TELEMETRY_NOTIFY,
        IOCTL_STORAGE_DEVICE_TELEMETRY_QUERY_CAPS,
        IOCTL_STORAGE_GET_DEVICE_TELEMETRY_RAW,
        IOCTL_STORAGE_SET_TEMPERATURE_THRESHOLD,
        IOCTL_STORAGE_PROTOCOL_COMMAND,
        IOCTL_STORAGE_SET_PROPERTY,
        IOCTL_STORAGE_QUERY_PROPERTY,
        IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES,
        IOCTL_STORAGE_GET_LB_PROVISIONING_MAP_RESOURCES,
        IOCTL_STORAGE_REINITIALIZE_MEDIA,
        IOCTL_STORAGE_GET_BC_PROPERTIES,
        IOCTL_STORAGE_ALLOCATE_BC_STREAM,
        IOCTL_STORAGE_FREE_BC_STREAM,
        IOCTL_STORAGE_CHECK_PRIORITY_HINT_SUPPORT,
        IOCTL_STORAGE_START_DATA_INTEGRITY_CHECK,
        IOCTL_STORAGE_STOP_DATA_INTEGRITY_CHECK,
        IOCTL_STORAGE_FIRMWARE_GET_INFO,
        IOCTL_STORAGE_FIRMWARE_DOWNLOAD,
        IOCTL_STORAGE_FIRMWARE_ACTIVATE,
        IOCTL_STORAGE_ENABLE_IDLE_POWER,
        IOCTL_STORAGE_GET_IDLE_POWERUP_REASON,
        IOCTL_STORAGE_POWER_ACTIVE,
        IOCTL_STORAGE_POWER_IDLE,
        IOCTL_STORAGE_EVENT_NOTIFICATION,
        IOCTL_STORAGE_DEVICE_POWER_CAP,
        IOCTL_STORAGE_RPMB_COMMAND,
        IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT,
        IOCTL_STORAGE_DIAGNOSTIC,
        IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS,
        IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE,
        IOCTL_STORAGE_GET_DEVICE_INTERNAL_LOG,
    }

    public enum DISK_IOCTL_Enum
    {
        IOCTL_DISK_GET_DRIVE_GEOMETRY,
        IOCTL_DISK_GET_PARTITION_INFO,
        IOCTL_DISK_SET_PARTITION_INFO,
        IOCTL_DISK_GET_DRIVE_LAYOUT,
        IOCTL_DISK_SET_DRIVE_LAYOUT,
        IOCTL_DISK_VERIFY,
        IOCTL_DISK_FORMAT_TRACKS,
        IOCTL_DISK_REASSIGN_BLOCKS,
        IOCTL_DISK_PERFORMANCE,
        IOCTL_DISK_IS_WRITABLE,
        IOCTL_DISK_LOGGING,
        IOCTL_DISK_FORMAT_TRACKS_EX,
        IOCTL_DISK_HISTOGRAM_STRUCTURE,
        IOCTL_DISK_HISTOGRAM_DATA,
        IOCTL_DISK_HISTOGRAM_RESET,
        IOCTL_DISK_REQUEST_STRUCTURE,
        IOCTL_DISK_REQUEST_DATA,
        IOCTL_DISK_PERFORMANCE_OFF,
        IOCTL_DISK_CONTROLLER_NUMBER,
        IOCTL_DISK_GET_PARTITION_INFO_EX,
        IOCTL_DISK_SET_PARTITION_INFO_EX,
        IOCTL_DISK_GET_DRIVE_LAYOUT_EX,
        IOCTL_DISK_SET_DRIVE_LAYOUT_EX,
        IOCTL_DISK_CREATE_DISK,
        IOCTL_DISK_GET_LENGTH_INFO,
        IOCTL_DISK_GET_DRIVE_GEOMETRY_EX,
        IOCTL_DISK_REASSIGN_BLOCKS_EX,
        IOCTL_DISK_UPDATE_DRIVE_SIZE,
        IOCTL_DISK_GROW_PARTITION,
        IOCTL_DISK_GET_CACHE_INFORMATION,
        IOCTL_DISK_SET_CACHE_INFORMATION,
        IOCTL_DISK_GET_WRITE_CACHE_STATE,
        IOCTL_DISK_DELETE_DRIVE_LAYOUT,
        IOCTL_DISK_UPDATE_PROPERTIES,
        IOCTL_DISK_FORMAT_DRIVE,
        IOCTL_DISK_SENSE_DEVICE,
        IOCTL_DISK_CHECK_VERIFY,
        IOCTL_DISK_MEDIA_REMOVAL,
        IOCTL_DISK_EJECT_MEDIA,
        IOCTL_DISK_LOAD_MEDIA,
        IOCTL_DISK_RESERVE,
        IOCTL_DISK_RELEASE,
        IOCTL_DISK_FIND_NEW_DEVICES,
        IOCTL_DISK_GET_MEDIA_TYPES,
        IOCTL_DISK_GET_DISK_ATTRIBUTES,
        IOCTL_DISK_SET_DISK_ATTRIBUTES,
        IOCTL_DISK_RESET_SNAPSHOT_INFO,
    }

    public enum VOLUME_IOCTL_Enum
    {
        IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS,
        IOCTL_VOLUME_ONLINE,
        IOCTL_VOLUME_OFFLINE,
        IOCTL_VOLUME_IS_CLUSTERED,
        IOCTL_VOLUME_GET_GPT_ATTRIBUTES,
    }

    public static readonly Dictionary<STORAGE_IOCTL_Enum, uint> STORAGE_IOCTL = new Dictionary<STORAGE_IOCTL_Enum, uint>()
    {
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_CHECK_VERIFY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0200, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_CHECK_VERIFY2,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0200, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_MEDIA_REMOVAL,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0201, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_EJECT_MEDIA,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0202, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_LOAD_MEDIA,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0203, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_LOAD_MEDIA2,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0203, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_RESERVE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0204, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_RELEASE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0205, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_FIND_NEW_DEVICES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0206, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_EJECTION_CONTROL,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0250, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_MCN_CONTROL,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0251, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_MEDIA_TYPES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0300, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_MEDIA_TYPES_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0301, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0304, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_HOTPLUG_INFO,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0305, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_SET_HOTPLUG_INFO,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0306, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_RESET_BUS,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0400, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_RESET_DEVICE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0401, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_BREAK_RESERVATION,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0405, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_PERSISTENT_RESERVE_IN,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0406, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_PERSISTENT_RESERVE_OUT,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0407, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_DEVICE_NUMBER,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0420, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_DEVICE_NUMBER_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0421, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_PREDICT_FAILURE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0440, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_FAILURE_PREDICTION_CONFIG,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0441, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_COUNTERS,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x442, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_READ_CAPACITY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0450, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_DEVICE_TELEMETRY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0470, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_DEVICE_TELEMETRY_NOTIFY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0471, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_DEVICE_TELEMETRY_QUERY_CAPS,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0472, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_DEVICE_TELEMETRY_RAW,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0473, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_SET_TEMPERATURE_THRESHOLD,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0480, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_PROTOCOL_COMMAND,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x04F0, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_SET_PROPERTY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x04FF, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_QUERY_PROPERTY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0500, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0501, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_LB_PROVISIONING_MAP_RESOURCES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0502, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_REINITIALIZE_MEDIA,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0590, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_BC_PROPERTIES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0600, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_ALLOCATE_BC_STREAM,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0601, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_FREE_BC_STREAM,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0602, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_CHECK_PRIORITY_HINT_SUPPORT,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0620, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_START_DATA_INTEGRITY_CHECK,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0621, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_STOP_DATA_INTEGRITY_CHECK,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0622, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_FIRMWARE_GET_INFO,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0700, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_FIRMWARE_DOWNLOAD,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0701, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_FIRMWARE_ACTIVATE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0702, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_ENABLE_IDLE_POWER,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0720, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_IDLE_POWERUP_REASON,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0721, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_POWER_ACTIVE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0722, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_POWER_IDLE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0723, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_EVENT_NOTIFICATION,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0724, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_DEVICE_POWER_CAP,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0725, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_RPMB_COMMAND,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0726, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0727, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_DIAGNOSTIC,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0728, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0729, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0730, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            STORAGE_IOCTL_Enum.IOCTL_STORAGE_GET_DEVICE_INTERNAL_LOG,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_STORAGE_BASE, 0x0731, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
    };

    public static readonly Dictionary<DISK_IOCTL_Enum, uint> DISK_IOCTL = new Dictionary<DISK_IOCTL_Enum, uint>()
    {
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_DRIVE_GEOMETRY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0000, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_PARTITION_INFO,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0001, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_SET_PARTITION_INFO,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0002, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_DRIVE_LAYOUT,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0003, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_SET_DRIVE_LAYOUT,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0004, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_VERIFY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0005, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_FORMAT_TRACKS,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0006, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_REASSIGN_BLOCKS,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0007, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_PERFORMANCE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0008, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_IS_WRITABLE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0009, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_LOGGING,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x000a, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_FORMAT_TRACKS_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x000b, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_HISTOGRAM_STRUCTURE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x000c, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_HISTOGRAM_DATA,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x000d, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_HISTOGRAM_RESET,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x000e, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_REQUEST_STRUCTURE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x000f, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_REQUEST_DATA,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0010, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_PERFORMANCE_OFF,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0018, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_CONTROLLER_NUMBER,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0011, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_PARTITION_INFO_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0012, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_SET_PARTITION_INFO_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0013, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_DRIVE_LAYOUT_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0014, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_SET_DRIVE_LAYOUT_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0015, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_CREATE_DISK,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0016, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_LENGTH_INFO,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0017, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_DRIVE_GEOMETRY_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0028, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_REASSIGN_BLOCKS_EX,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0029, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_UPDATE_DRIVE_SIZE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0032, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GROW_PARTITION,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0034, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_CACHE_INFORMATION,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0035, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_SET_CACHE_INFORMATION,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0036, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_WRITE_CACHE_STATE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0037, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_DELETE_DRIVE_LAYOUT,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0040, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_UPDATE_PROPERTIES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0050, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_FORMAT_DRIVE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x00f3, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_SENSE_DEVICE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x00f8, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_CHECK_VERIFY,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0200, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_MEDIA_REMOVAL,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0201, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_EJECT_MEDIA,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0202, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_LOAD_MEDIA,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0203, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_RESERVE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0204, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_RELEASE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0205, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_FIND_NEW_DEVICES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0206, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_MEDIA_TYPES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0300, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_GET_DISK_ATTRIBUTES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x003c, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_SET_DISK_ATTRIBUTES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x003d, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            DISK_IOCTL_Enum.IOCTL_DISK_RESET_SNAPSHOT_INFO,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_DISK_BASE, 0x0084, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
    };

    public static readonly Dictionary<VOLUME_IOCTL_Enum, uint> VOLUME_IOCTL = new Dictionary<VOLUME_IOCTL_Enum, uint>()
    {
        {
            VOLUME_IOCTL_Enum.IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_VOLUME_BASE, 0, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            VOLUME_IOCTL_Enum.IOCTL_VOLUME_ONLINE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_VOLUME_BASE, 2, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            VOLUME_IOCTL_Enum.IOCTL_VOLUME_OFFLINE,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_VOLUME_BASE, 3, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_READ_ACCESS | FILE_ACCESS.FILE_WRITE_ACCESS)
        },
        {
            VOLUME_IOCTL_Enum.IOCTL_VOLUME_IS_CLUSTERED,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_VOLUME_BASE, 12, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
        {
            VOLUME_IOCTL_Enum.IOCTL_VOLUME_GET_GPT_ATTRIBUTES,
            WinIOCtlFunctions.CTL_CODE( DEVICE_TYPES.IOCTL_VOLUME_BASE, 14, METHOD_CODES.METHOD_BUFFERED, FILE_ACCESS.FILE_ANY_ACCESS)
        },
    };

}
